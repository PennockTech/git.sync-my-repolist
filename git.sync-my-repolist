#!/usr/bin/env python3

"""
git.sync-my-repolist: sync all my repos, per config file

A gross crude hack but convenient.

Use `git config --local --bool pdp.skip-auto-sync true` in a repo to mark
it to be skipped even if listed in our config file.
Can also apply globally if you want to inefficiently block this script.

End argument parsing with `--` and any command-line presented thereafter
is used as an alternative git sub-command to `pull`.

Use `git config --local pdp.skip-sync-cmds 'fsck fred'` to mark a repo
as to be skipped for the alternative sub-commands `fsck` and `fred`.

Thus `git.sync-my-repolist -g all -- fsck` to check "roughly everything".

Groups are processed in the order they appear on the command-line; the "all"
group sorts known groups alphabetically.  Within each group, items are
processed in the order they appear in the configuration file.  Glob results
are sorted (by unspecified collation).  Duplicate directory pathnames are
skipped (by pathname, so symlinks would defeat that).  Knowing the defined
ordering helps for using --continue.

If a repo is skipped past for --continue and then encountered again, it will
still count as "seen", on the assumption that you're continuing after an
interrupted run and it will have been seen on the first pass.  The --continue
option should be given a full repo path, but an unqualified dirname may be
used at the risk of conflicts.
Similarly for --continue-after which lets you skip past a known-broken setup
without repairing it or marking it for skipping.
"""

__author__ = 'phil.pennock@spodhuis.org (Phil Pennock)'

import argparse
import collections
import glob
import os.path
import subprocess
import sys

_DEF_CONFIGFILENAME = '~/etc/git-repolist.conf'
_DEF_GROUP = '_default_'

EXAMPLE_CONFIG = """#
# This is {default_configfn}
#
# No directives are required, although functionality will be limited
# with no repositories specified.  In the simplest case, a repo or two,
# one per line, specified without adornment, will do.
# Repository paths have ~ user-path expansion performed upon them.

# Any remotes specified here will be fetched before the pull, in the
# order given here, if they exist as names of remotes in that repo.
prefer_remotes github origin

# Override the default git command on this host:
git /opt/git-devel/bin/git

# Some repos to check out (all equivalent)
~/src/repo1
dir ~/src/repo2
repo ~/src/repo3

# Some other repos to pull
glob ~/go/src/github.com/myname/*

# We only pull project foo if explicitly requested
group foo
glob ~/go/foo.example.com/*

# If we do not define group 'all' then a virtual 'all' will exist
""".format(default_configfn=_DEF_CONFIGFILENAME)

class Error(Exception):
  """Base class for exceptions from git.sync-my-repolist."""
  pass

class ExitError(Error):
  """Error exception which should force exit without stack-trace."""
  pass


_PROGNAME = "?"
_VERBOSE = 0

def verbose(template, ctx, *, level=1, error=False):
  if _VERBOSE < level:
    return
  out = sys.stderr if error else sys.stdout
  print(_PROGNAME, ': ', template.format(**ctx), sep='', file=out)


class Context(dict):
  def dup(self):
    return Context(self.copy())
  def verbose(self, template, **kwargs):
    return verbose(template, self, **kwargs)
  def __getattr__(self, key):
    return self[key]
  def __setattr__(self, key, nv):
    # we don't have any direct attrs which we want to allow to be overriden
    self[key] = nv
  def __dir__(self):
    return self.keys()
  def set(self, k, v):
    self[k] = v

# We only support recursive globs if Python does in glob; not much point
# going further.  We do need to sort, for resumption to be sane.
if sys.version_info >= (3,5):
  def my_glob(pattern):
    return sorted(glob.iglob(os.path.expanduser(pattern), recursive=True))
else:
  def my_glob(pattern):
    return sorted(glob.iglob(os.path.expanduser(pattern)))


class DefaultStr(object):
  """For when we want to have cmdline override config file."""
  def __init__(self, default):
    self.value = default
  def __str__(self):
    return self.value
  def __repr__(self):
    return repr(self.value)


class Config(object):
  def __init__(self):
    self.OPTIONS = None
    self._git = None
    self.git_can_nameonly = False
    self._progname = '???'
    self.repo_lists = collections.defaultdict(list)
    self.prefer_remotes = []

  def parse_OPTIONS(self, options):
    self.OPTIONS = options
    self._git = options.git
    self.sub_command = None
    if options.subcommand_override:
      if options.subcommand_override[0] != '--':
        raise ExitError('git overrides should be after a --')
      self.sub_command = options.subcommand_override[1:]
      if not self.sub_command:
        self.sub_command = None
    global _VERBOSE
    _VERBOSE = self.OPTIONS.verbose

  def _set_progname(self, progname):
    self._progname = progname
    global _PROGNAME
    _PROGNAME = progname

  progname = property(
      lambda self: self._progname,
      _set_progname)

  def git(self):
    return str(self._git)

  def tune_for_environment(self):
    git_version = subprocess.check_output([self.git(), 'version'])
    if git_version.startswith(b'git version '):
      git_version = git_version[12:].rstrip().decode('ascii')
    else:
      raise Error('Unable to parse git version')
    version_info = tuple(map(int, git_version.split('.')))
    if version_info >= (2, 6):
      self.git_can_nameonly = True
    else:
      verbose('git too old ({v}) to support "config --name-only"', {'v': git_version})

  def set_option(self, newvalue, ctx):
    ctx = ctx.dup()
    ctx.newvalue = newvalue
    keyattr = '_' + ctx.keyword

    v = getattr(self, keyattr)
    if v is None:
      ctx.verbose('not a tuneable config option {key!r}', level=0, error=True)
      return
    ctx.oldvalue = v
    if type(v) == DefaultStr:
      setattr(self, keyattr, newvalue)
      ctx.verbose('switched {keyword} from {oldvalue!r} to {newvalue!r}')
    else:
      ctx.verbose('ignored new {keyword} value from config line {linenum} because already explicitly set')
      ctx.verbose('{keyword} remains {oldvalue!r}, ignoring {newvalue!r}')

  def parse_filehandle(self, fh):
    group = [_DEF_GROUP]
    keyword_handlers = {
        'dir': lambda d, c: self._extract_one_candidate(os.path.expanduser(d), c),
        'repo': lambda d, c: self._extract_one_candidate(os.path.expanduser(d), c),
        'glob': lambda p, c: [self._extract_one_candidate(d, c) for d in my_glob(p)],
        'prefer_remotes': lambda r, c: self.prefer_remotes.extend(r.split()),
        'git': lambda p, c: self.set_option(p, c),
        'group': lambda g, c: group.insert(0, g),
        }
    errored = False
    for lnum, l in enumerate(fh):
      l = l.strip()
      if not l or l.startswith('#'):
        continue
      if ' ' in l:
        keyword, param = l.split(None, 1)
      else:
        keyword = 'dir'
        param = l

      ctx = Context(linenum=lnum+1, line=l, keyword=keyword, param=param, group=group[0])

      keyword = keyword.lower()
      if keyword in keyword_handlers:
        keyword_handlers[keyword](param, ctx)
        ctx.verbose('config line {linenum} parsed {keyword}', level=3)
      else:
        ctx.verbose('config line {linenum} unknown keyword: {keyword!r}', error=True, level=0)
        errored = True
    if errored:
      raise SystemExit()

  def _extract_one_candidate(self, candidate, ctx):
    ctx = ctx.dup()
    ctx.repo = candidate
    if os.path.exists(candidate):
      if os.path.isdir(candidate):
        self.repo_lists[ctx.group].append(ctx)
      else:
        # bump level because expect this to be files in a directory mostly holding repo subdirs
        ctx.verbose('Skipping non-directory: {repo!r}', level=2)
    else:
      ctx.verbose('Skipping non-existent repo: {repo!r}')

class Syncer(object):
  def __init__(self, config):
    self.config = config
    self.seen_groups = set()
    self.known_groups = set(config.repo_lists.keys())
    self.seen_repos = set()
    self.continue_skipping = bool(config.OPTIONS.continue_repo) or bool(config.OPTIONS.continue_after_repo)
    self.continue_bare = False
    if self.continue_skipping:
      if config.OPTIONS.continue_repo != '' and config.OPTIONS.continue_after_repo != '':
        raise Error('got mutually exclusive options, should\'ve been blocked before now')
      if config.OPTIONS.continue_repo != '' and os.path.sep not in config.OPTIONS.continue_repo:
        self.continue_bare = True
      if config.OPTIONS.continue_after_repo != '' and os.path.sep not in config.OPTIONS.continue_after_repo:
        self.continue_bare = True

  def EachGroup(self, groups):
    if not groups:
      groups = [_DEF_GROUP]
    todo = list(groups)
    while todo:
      g = todo.pop(0)
      if g is None:
        g = _DEF_GROUP
      if not g:
        verbose('skipping an empty groupname', {})
        continue
      if g in self.seen_groups:
        verbose('already synced group {group!r}', {'group': g})
        continue
      if g == 'all' and 'all' not in self.known_groups:
        self.seen_groups.add('all')
        todo.extend(sorted(self.known_groups))
        continue
      self.OneGroup(g)

  def _should_continue(self, repo):
    if not self.continue_skipping:
      return False
    testname = os.path.basename(repo) if self.continue_bare else repo
    if self.config.OPTIONS.continue_repo != '' and self.config.OPTIONS.continue_repo == testname:
      self.continue_skipping = False
      return False
    if self.config.OPTIONS.continue_after_repo != '' and self.config.OPTIONS.continue_after_repo == testname:
      self.continue_skipping = False
      return True
    return True

  def OneGroup(self, groupname):
    self.seen_groups.add(groupname)
    if groupname not in self.known_groups:
      verbose('unknown groupname {group!r}', {'group': groupname}, error=True, level=0)
      return
    verbose('Processing group: {group!r}', {'group': groupname})
    for ctx in self.config.repo_lists[groupname]:
      repo = ctx.repo
      if repo in self.seen_repos:
        ctx.verbose('already handled repo {repo}')
        continue
      self.seen_repos.add(repo)

      # Skip for --continue comes after seen marking, see pkg doc for rationale ^^^
      if self.continue_skipping and self._should_continue(repo):
        ctx.verbose('skipping past {repo!r}')
        continue

      if self.config.OPTIONS.list_repos:
        ctx.verbose('{repo!r}', level=0)
        continue

      cmd = [self.config.git(), '-C', repo]

      # don't include --local: let it be set in ~/.gitconfig I suppose
      cmdShouldSkip = cmd + 'config --bool pdp.skip-auto-sync'.split()
      shouldSkipCmd = subprocess.Popen(cmdShouldSkip, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
      output = shouldSkipCmd.stdout.read()
      rc = shouldSkipCmd.wait()
      if rc == 0:
        if output.rstrip() == b'true':
          ctx.verbose('{repo!r}: repo config says to skip this repo')
          continue
        else:
          ctx.skip_auto_sync = output.rstrip().decode('utf-8')
          ctx.verbose('{repo!r}: config found pdp.skip-auto-sync but is set: {skip_auto_sync!r}', level=2)
      del cmdShouldSkip, shouldSkipCmd, output, rc

      self.OneRepo(ctx)

  def OneRepo(self, ctx):
    repo = ctx.repo
    cmd = [self.config.git(), '-C', repo]

    if self.config.sub_command is not None:
      # If we're going to skip the remotes check, we still need to test if we are a git dir.
      # We don't want the same check; we want to be able to fsck/whatever a repo with no remotes.
      # So different check:
      cmdIsRepo = cmd + 'rev-parse --git-dir'.split()
      isRepoCmd = subprocess.Popen(cmdIsRepo, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
      rc = isRepoCmd.wait()
      if rc != 0:
        ctx.verbose('{repo!r}: not a repo, skipping [from config line {linenum}]')
        return

      cmdShouldSkip = cmd + 'config pdp.skip-sync-cmds'.split()
      shouldSkipCmd = subprocess.Popen(cmdShouldSkip, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
      output = shouldSkipCmd.stdout.read()
      rc = shouldSkipCmd.wait()
      if rc == 0:
        i_am = self.config.sub_command[0].lower()
        ctx.i_am = i_am
        if i_am in output.decode('utf-8').lower().split():
          ctx.verbose('{repo!r}: repo config says to skip this repo for action {i_am!r}', level=0)
          return
        else:
          ctx.skip_sync_cmds = ' '.join(output.decode('utf-8').lower().split())
          ctx.verbose('{repo!r}: config found pdp.skip-sync-cmds but {i_am!r} not in {skip_sync_cmds!r}', level=2)
        del i_am
      del cmdShouldSkip, shouldSkipCmd, output, rc

    else: # we only want the remotes if not using sub-command override
      remotes = []
      cmdRemotes = cmd + 'config --local'.split()
      if self.config.git_can_nameonly:
        cmdRemotes += ['--name-only']
      cmdRemotes += ['--get-regexp', 'remote\.[^.]+\.url']
      # old versions of git lack the --name-only, but it makes things safer to use it if available
      # (the value can contain newlines)
      remotesCmd = subprocess.Popen(cmdRemotes, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
      for l in remotesCmd.stdout:
        l = l.rstrip().decode('utf-8')
        if not self.config.git_can_nameonly:
          l = l.split(None, 1)[0]
        if l.startswith('remote.') and l.endswith('.url'):
          remotes.append(l[7:-4])
      remotesCmd.wait()
      # ignore return code, will be 1 when no remotes, we have that anyway, and if caused by something else, stderr will pass-thru
      if not remotes:
        ctx.verbose('{repo!r}: no remotes found, skipping [from config line {linenum}]')
        return
      remotes = set(remotes)

    branchNameCmd = subprocess.Popen(cmd + 'symbolic-ref -q HEAD'.split(), stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
    branch_name = None
    for l in branchNameCmd.stdout:
      if not l or not l.rstrip():
        continue
      branch_name = l.rstrip().decode('utf-8').rsplit('/')[-1]
    branchNameCmd.wait()
    if not branch_name:
      ctx.verbose('{repo!r}: unable to determine current branch name')
      return
    ctx.branch_name = branch_name
    ctx.verbose('{repo!r}: branch is {branch_name!r}', level=2)

    if self.config.OPTIONS.verbose:
      ctx.verbose('In: {repo!r}')
      subprocess.check_call(cmd + ['status', '--short'])

    if self.config.sub_command is not None:
      ctx.command_line = self.config.sub_command
      if self.config.OPTIONS.not_really:
        ctx.verbose('{repo!r}: skipping {command_line!r} because --not-really')
        return
      subprocess.check_call(cmd + self.config.sub_command)
      return

    if self.config.OPTIONS.not_really:
      ctx.verbose('{repo!r}: skipping pull because --not-really')
      return

    for preferred in self.config.prefer_remotes:
      if preferred in remotes:
        subprocess.check_call(cmd + ['fetch', preferred])
        remotes.discard(preferred)
    # We don't fetch _all_ remotes; if the branch/master is not in the already-fetched, it will be grabbed by the pull
    #subprocess.check_call(cmd + ['fetch', '--multiple'] + list(remotes))

    if branch_name != 'master':
      fetchMasterOnly = False
      for skip_file in ('.arcconfig',):
        if os.path.exists(os.path.join(repo, skip_file)):
          fetchMasterOnly = True
          ctx.fetch_because = skip_file
          break
      if fetchMasterOnly:
        ctx.verbose('{repo!r}: fetch-only ∵ branch {branch_name!r} and file {fetch_because!r} exists')
        subprocess.check_call(cmd + ['fetch', '-v'])
        return

    subprocess.check_call(cmd + ['pull'])

def _main(args, argv0):
  config = Config()
  config.progname = argv0
  parser = argparse.ArgumentParser(
      description=__doc__,
      formatter_class=argparse.RawDescriptionHelpFormatter)
      #allow_abbrev=False)
  parser.add_argument('-c', '--config',
                      type=argparse.FileType('r', encoding='UTF-8'),
                      default=os.path.expanduser(_DEF_CONFIGFILENAME),
                      help='Config file to read [%(default)s]')
  parser.add_argument('--emit-example-config',
                      action='store_true', default=False,
                      help='Emit an example config to stdout and exit')
  parser.add_argument('--git',
                      default=DefaultStr('git'),
                      help='Git executable to invoke [%(default)s]')
  parser.add_argument('-g', '--group',
                      action='append', default=[],
                      help='Sync a non-default group')
  parser.add_argument('--list-groups',
                      action='store_true', default=False,
                      help='List configured groups instead')
  parser.add_argument('--list-repos',
                      action='store_true', default=False,
                      help='List known repos we would act on instead')
  parser.add_argument('-n', '--not-really',
                      action='store_true', default=False,
                      help='Make no mutating changes')
  parser.add_argument('-v', '--verbose',
                      action='count', default=0,
                      help='Be more verbose')
  pacont = parser.add_mutually_exclusive_group()
  pacont.add_argument('-C', '--continue',
                      dest='continue_repo', type=str, default='',
                      help='skip repos "before" this one ("all" sorts groups alphabetically)')
  pacont.add_argument('-A', '--continue-after',
                      dest='continue_after_repo', type=str, default='',
                      help='skip repos "after" this one ("all" sorts groups alphabetically)')
  parser.add_argument('subcommand_override', nargs=argparse.REMAINDER)
  config.parse_OPTIONS(parser.parse_args(args=args))

  if config.OPTIONS.emit_example_config:
    print(EXAMPLE_CONFIG, end='')
    return 0

  config.tune_for_environment()

  config.parse_filehandle(config.OPTIONS.config)

  if config.OPTIONS.list_groups:
    for g in sorted(config.repo_lists.keys()):
      if g == _DEF_GROUP:
        continue
      print(g)
    return 0

  groups = [x for y in map(lambda x: x.split(','), config.OPTIONS.group) for x in y]
  verbose('groups: {g}', {'g': groups})
  Syncer(config).EachGroup(groups)

if __name__ == '__main__':
  argv0 = sys.argv[0].rsplit('/')[-1]
  try:
    rv = _main(sys.argv[1:], argv0=argv0)
    sys.exit(rv)
  except ExitError as e:
    print('{0}: {1}'.format(argv0, e), file=sys.stderr)
    sys.exit(1)

# vim: set ft=python sw=2 expandtab :
